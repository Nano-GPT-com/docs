{
  "openapi": "3.1.0",
  "info": {
    "title": "NanoGPT API",
    "description": "API documentation for the NanoGPT language and image generation services",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://nano-gpt.com/api",
      "description": "NanoGPT API Server"
    }
  ],
  "paths": {
    "/v1/chat/completions": {
      "post": {
        "description": "Creates a chat completion for the provided messages",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for chat completion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat completion response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/completions": {
      "post": {
        "description": "Creates a completion for the provided prompt",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for text completion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Text completion response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/generate-image": {
      "post": {
        "description": "Generates an image from a text prompt",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for image generation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Image generation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/talk-to-gpt": {
      "post": {
        "description": "Legacy endpoint for chat interactions with the GPT model",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for talking to GPT",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TalkToGptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Talk to GPT response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Text response followed by metadata in <NanoGPT> tags"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models": {
      "get": {
        "description": "List available models",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/models": {
      "get": {
        "description": "Legacy endpoint to list available models",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of available models (legacy format)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsLegacyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/check-balance": {
      "post": {
        "description": "Check the account balance",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account balance information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/check-midjourney-status": {
      "post": {
        "description": "Check the status of an asynchronous Midjourney image generation task",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Task ID to check status for",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckMidjourneyStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Midjourney task status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckMidjourneyStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing task_id)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          }
        }
      }
    },
    "/receive-nano": {
      "post": {
        "description": "Process pending Nano transactions for the account",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Nano receive operation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiveNanoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/video": {
      "post": {
        "description": "Generate high-quality short-form videos",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for video generation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Video generation request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/video/status": {
      "get": {
        "description": "Check the status of a video generation request",
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "runId",
            "in": "query",
            "description": "Run ID from the generation request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID from the generation request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cost",
            "in": "query",
            "description": "Cost of the video generation",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentSource",
            "in": "query",
            "description": "Payment source used",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video generation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/images/generations": {
      "servers": [
        {
          "url": "https://nano-gpt.com",
          "description": "Root server for OpenAI-compatible endpoints"
        }
      ],
      "post": {
        "description": "Creates an image generation for the provided prompt (OpenAI-compatible)",
        "security": [
          { "bearerAuth": [] }
        ],
        "requestBody": {
          "description": "Parameters for image generation",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OpenAIImageGenerationsRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image generation response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OpenAIImageGenerationsResponse" }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChatCompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for completion",
            "default": "chatgpt-4o-latest"
          },
          "messages": {
            "type": "array",
            "description": "Array of message objects with role and content",
            "default": [
              {
                "role": "user",
                "content": "Testing, please reply!"
              }
            ],
            "items": {
              "type": "object",
              "required": [
                "role",
                "content"
              ],
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the message author",
                  "enum": ["system", "user", "assistant"]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the message"
                }
              }
            }
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response",
            "default": false
          },
          "temperature": {
            "type": "number",
            "description": "Controls randomness (0-2)",
            "default": 0.7
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate",
            "default": 4000
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus sampling parameter (0-1)",
            "default": 1
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Penalty for frequency of tokens (-2 to 2)",
            "default": 0
          },
          "presence_penalty": {
            "type": "number",
            "description": "Penalty for presence of tokens (-2 to 2)",
            "default": 0
          }
        }
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the completion"
          },
          "object": {
            "type": "string",
            "description": "Object type, always 'chat.completion'"
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp of when the completion was created"
          },
          "choices": {
            "type": "array",
            "description": "Array of completion choices",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "Index of the choice"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "description": "Role of the completion message",
                      "enum": ["assistant"]
                    },
                    "content": {
                      "type": "string",
                      "description": "Content of the completion message"
                    }
                  }
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Reason why the completion finished",
                  "enum": ["stop", "length", "content_filter"]
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt"
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in the completion"
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used"
              }
            }
          }
        }
      },
      "CompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for completion",
            "default": "chatgpt-4o-latest"
          },
          "prompt": {
            "type": "string",
            "description": "The text prompt to complete"
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate",
            "default": 4000
          },
          "temperature": {
            "type": "number",
            "description": "Controls randomness (0-2)",
            "default": 0.7
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus sampling parameter (0-1)",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response",
            "default": false
          },
          "stop": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Up to 4 sequences where the API will stop generating"
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Penalty for frequency of tokens (-2 to 2)",
            "default": 0
          },
          "presence_penalty": {
            "type": "number",
            "description": "Penalty for presence of tokens (-2 to 2)",
            "default": 0
          }
        }
      },
      "CompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the completion"
          },
          "object": {
            "type": "string",
            "description": "Object type, always 'text_completion'"
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp of when the completion was created"
          },
          "model": {
            "type": "string",
            "description": "Model used for completion"
          },
          "choices": {
            "type": "array",
            "description": "Array of completion choices",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The completed text"
                },
                "index": {
                  "type": "integer",
                  "description": "Index of the choice"
                },
                "logprobs": {
                  "type": "object",
                  "nullable": true,
                  "description": "Log probabilities of tokens (if requested)"
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Reason why the completion finished",
                  "enum": ["stop", "length", "content_filter"]
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt"
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in the completion"
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used"
              }
            }
          }
        }
      },
      "ImageGenerationRequest": {
        "type": "object",
        "required": [
          "prompt",
          "model"
        ],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The text description of the image to generate",
            "example": "RAW photo, a portrait photo of a latina woman in casual clothes, natural skin, 8k uhd, high quality, film grain, Fujifilm XT3"
          },
          "model": {
            "type": "string",
            "description": "The model to use for generation",
            "default": "recraft-v3"
          },
          "width": {
            "type": "integer",
            "description": "Width of the generated image",
            "default": 1024
          },
          "height": {
            "type": "integer",
            "description": "Height of the generated image",
            "default": 1024
          },
          "negative_prompt": {
            "type": "string",
            "description": "Things to avoid in the generated image"
          },
          "nImages": {
            "type": "integer",
            "description": "Number of images to generate",
            "default": 1
          },
          "num_steps": {
            "type": "integer",
            "description": "Number of denoising steps",
            "default": 10
          },
          "resolution": {
            "type": "string",
            "description": "Output resolution",
            "default": "1024x1024"
          },
          "sampler_name": {
            "type": "string",
            "description": "Sampling method"
          },
          "scale": {
            "type": "number",
            "description": "Guidance scale",
            "default": 7.5
          }
        }
      },
      "ImageGenerationResponse": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "Base64 encoded image data"
          },
          "cost": {
            "type": "number",
            "description": "Cost of the generation"
          },
          "inputTokens": {
            "type": "integer",
            "description": "Number of input tokens used"
          },
          "outputTokens": {
            "type": "integer",
            "description": "Number of output tokens used"
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "TalkToGptRequest": {
        "type": "object",
        "required": [
          "model"
        ],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The text prompt to send to GPT (optional)",
            "default": "",
            "example": "Please explain the concept of artificial intelligence."
          },
          "model": {
            "type": "string",
            "description": "The model to use for generation",
            "default": "chatgpt-4o-latest"
          },
          "messages": {
            "type": "array",
            "description": "Array of previous message objects for context (optional)",
            "default": [
              {
                "role": "user",
                "content": "Hi, I'm just testing!"
              }
            ],
            "items": {
              "type": "object",
              "required": [
                "role",
                "content"
              ],
              "properties": {
                "role": {
                  "type": "string", 
                  "description": "The role of the message author",
                  "enum": ["user", "assistant"]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the message"
                }
              }
            }
          }
        }
      },
      "ModelsResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "Type of object, always 'list' for the models response",
            "default": "list"
          },
          "data": {
            "type": "array",
            "description": "List of available models",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the model",
                  "example": "chatgpt-4o-latest"
                },
                "object": {
                  "type": "string",
                  "description": "Type of object, always 'model'",
                  "default": "model"
                },
                "created": {
                  "type": "integer",
                  "description": "Unix timestamp when the model was created"
                },
                "owned_by": {
                  "type": "string",
                  "description": "Organization that owns the model",
                  "example": "nanogpt"
                }
              }
            }
          }
        }
      },
      "ModelsLegacyResponse": {
        "type": "object",
        "properties": {
          "models": {
            "type": "array",
            "description": "List of available model names",
            "items": {
              "type": "string",
              "description": "Model identifier",
              "example": "chatgpt-4o-latest"
            }
          }
        }
      },
      "BalanceResponse": {
        "type": "object",
        "properties": {
          "usd_balance": {
            "type": "string",
            "description": "Account balance in USD",
            "example": "129.46956147"
          },
          "nano_balance": {
            "type": "string",
            "description": "Account balance in Nano",
            "example": "26.71801147"
          },
          "nanoDepositAddress": {
            "type": "string",
            "description": "Nano deposit address for the account",
            "example": "nano_1gx385nnj7rw67hsksa3pyxwnfr48zu13t35ncjmtnqb9zdebtjhh7ahks34"
          }
        }
      },
      "ReceiveNanoResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          },
          "received_blocks": {
            "type": "array",
            "description": "Array of received block hashes",
            "items": {
              "type": "string"
            }
          },
          "total_received": {
            "type": "string",
            "description": "Total amount of Nano received"
          }
        }
      },
      "VideoGenerationRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The prompt for video generation (mutually exclusive with script)",
            "example": "Create a whimsical animated story about a young inventor who creates a flying bicycle"
          },
          "script": {
            "type": "string",
            "description": "A fully-written script to skip AI script generation (takes precedence over prompt)",
            "example": "A young inventor's workshop filled with whimsical contraptions and floating gears."
          },
          "framework": {
            "type": "string",
            "description": "The story framework to use",
            "default": "default",
            "enum": ["default", "emotional_story", "product_showcase", "tutorial"]
          },
          "targetLengthInWords": {
            "type": "integer",
            "description": "Target length in words",
            "default": 70,
            "example": 70
          },
          "directorNotes": {
            "type": "string",
            "description": "Specific instructions for the image generation engine",
            "example": "Use warm, golden lighting and make the workshop scenes feel cozy and inviting"
          },
          "imageConfig": {
            "type": "object",
            "description": "Configuration for image generation",
            "properties": {
              "model": {
                "type": "string",
                "description": "The image model to use",
                "enum": ["recraft", "flux_lora"],
                "default": "recraft"
              },
              "style": {
                "type": "string",
                "description": "Style for Recraft model (when model is 'recraft')",
                "example": "realistic_image/studio_portrait"
              },
              "loraConfig": {
                "type": "object",
                "description": "Configuration for Flux LoRA model (when model is 'flux_lora')",
                "properties": {
                  "loraSlug": {
                    "type": "string",
                    "description": "The LoRA style to use",
                    "example": "ghibsky-comic-book"
                  }
                }
              }
            }
          },
          "voice": {
            "type": "string",
            "description": "Voice ID to use for narration",
            "example": "pNInz6obpgDQGcFmaJgB"
          },
          "captionsShow": {
            "type": "boolean",
            "description": "Whether to show captions",
            "default": true
          },
          "captionsStyle": {
            "type": "string",
            "description": "Style for captions",
            "default": "default",
            "enum": ["default", "minimal", "neon", "cinematic", "fancy", "tiktok", "highlight", "gradient", "instagram", "vida", "manuscripts"]
          },
          "effects": {
            "type": "object",
            "description": "Video effects configuration",
            "properties": {
              "transition": {
                "type": "string",
                "description": "Transition type",
                "default": "fade"
              },
              "floating": {
                "type": "boolean",
                "description": "Whether to enable floating effect",
                "default": false
              }
            }
          },
          "quality": {
            "type": "string",
            "description": "Video quality",
            "default": "medium",
            "enum": ["low", "medium", "high"]
          },
          "motion": {
            "type": "object",
            "description": "Motion configuration",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Whether to enable motion",
                "default": false
              },
              "strength": {
                "type": "integer",
                "description": "Motion strength",
                "default": 3,
                "minimum": 1,
                "maximum": 10
              }
            }
          },
          "music": {
            "type": "string",
            "description": "Music track to use",
            "example": "video-creation/music/dramatic_cinematic_score.mp3"
          }
        },
        "oneOf": [
          {
            "required": ["prompt"]
          },
          {
            "required": ["script"]
          }
        ]
      },
      "VideoGenerationResponse": {
        "type": "object",
        "properties": {
          "runId": {
            "type": "string",
            "description": "Unique identifier for the generation run"
          },
          "projectId": {
            "type": "string",
            "description": "Unique identifier for the project"
          },
          "cost": {
            "type": "number",
            "description": "Cost of the video generation"
          },
          "paymentSource": {
            "type": "string",
            "description": "Payment source used"
          },
          "status": {
            "type": "string",
            "description": "Current status of the generation",
            "enum": ["PENDING", "PROCESSING", "COMPLETED", "FAILED"]
          }
        }
      },
      "VideoStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Current status of the generation",
            "enum": ["PENDING", "PROCESSING", "COMPLETED", "FAILED"]
          },
          "data": {
            "type": "object",
            "properties": {
              "isCompleted": {
                "type": "boolean",
                "description": "Whether the generation is completed"
              },
              "isSuccess": {
                "type": "boolean",
                "description": "Whether the generation was successful"
              },
              "output": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL to the generated video"
                  }
                }
              }
            }
          }
        }
      },
      "CheckMidjourneyStatusRequest": {
        "type": "object",
        "required": ["task_id"],
        "properties": {
          "task_id": {
            "type": "string",
            "description": "The unique identifier for the Midjourney generation task.",
            "example": "1744449927914205"
          }
        }
      },
      "CheckMidjourneyStatusResponse": {
        "type": "object",
        "required": ["status", "task_id"],
        "properties": {
          "status": {
            "type": "string",
            "description": "The current status of the Midjourney task.",
            "enum": ["SUCCESS", "FAILED", "PENDING", "RUNNING", "IN_PROGRESS", "submitted", "NOT_START", "unknown"],
            "example": "SUCCESS"
          },
          "task_id": {
            "type": "string",
            "description": "The unique identifier for the Midjourney generation task.",
            "example": "1744449927914205"
          },
          "progress": {
            "type": "string",
            "description": "Optional progress indicator (e.g., \"0%\")",
            "example": "50%",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the generated image (present on SUCCESS).",
            "example": "https://image-url.com/generated_image.png",
            "nullable": true
          },
          "failReason": {
            "type": "string",
            "description": "The reason for failure (present on FAILED).",
            "example": "Content moderation filter triggered.",
            "nullable": true
          }
        }
      },
      "OpenAIImageGenerationsRequest": {
        "type": "object",
        "required": [
          "prompt"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for generation",
            "default": "hidream"
          },
          "prompt": {
            "type": "string",
            "description": "The text prompt to generate an image from"
          },
          "n": {
            "type": "integer",
            "description": "Number of images to generate",
            "default": 1
          },
          "size": {
            "type": "string",
            "description": "The size of the generated images",
            "enum": ["256x256", "512x512", "1024x1024"]
          },
          "response_format": {
            "type": "string",
            "description": "The format in which the generated images are returned",
            "enum": ["url", "b64_json"]
          },
          "user": {
            "type": "string",
            "description": "A unique identifier representing your end-user"
          }
        }
      },
      "OpenAIImageGenerationsResponse": {
        "type": "object",
        "properties": {
          "created": {
            "type": "integer",
            "description": "Unix timestamp of when the image was created"
          },
          "data": {
            "type": "array",
            "description": "List of generated images",
            "items": {
              "type": "object",
              "properties": {
                "url": { "type": "string", "description": "URL to the generated image" },
                "b64_json": { "type": "string", "description": "Base64 encoded image data" }
              }
            }
          },
          "cost": {
            "type": "number",
            "description": "Cost of the generation"
          },
          "paymentSource": {
            "type": "string",
            "description": "Payment source used"
          },
          "remainingBalance": {
            "type": "number",
            "description": "Remaining balance after the generation"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}