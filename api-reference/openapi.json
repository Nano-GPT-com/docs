{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://nano-gpt.com/api",
      "description": "NanoGPT API Server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat/completions": {
      "post": {
        "description": "Creates a chat completion for the provided messages",
        "requestBody": {
          "description": "Parameters for chat completion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat completion response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/completions": {
      "post": {
        "description": "Creates a completion for the provided prompt",
        "requestBody": {
          "description": "Parameters for text completion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Text completion response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/generate-image": {
      "post": {
        "description": "Generates an image from a text prompt",
        "requestBody": {
          "description": "Parameters for image generation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Image generation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/plant/webhook": {
      "post": {
        "description": "Information about a new plant added to the store",
        "requestBody": {
          "description": "Plant added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ChatCompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for completion",
            "default": "chatgpt-4o-latest"
          },
          "messages": {
            "type": "array",
            "description": "Array of message objects with role and content",
            "default": [
              {
                "role": "user",
                "content": "Testing, please reply!"
              }
            ],
            "items": {
              "type": "object",
              "required": [
                "role",
                "content"
              ],
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the message author",
                  "enum": ["system", "user", "assistant"]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the message"
                }
              }
            }
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response",
            "default": false
          },
          "temperature": {
            "type": "number",
            "description": "Controls randomness (0-2)",
            "default": 0.7
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate",
            "default": 4000
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus sampling parameter (0-1)",
            "default": 1
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Penalty for frequency of tokens (-2 to 2)",
            "default": 0
          },
          "presence_penalty": {
            "type": "number",
            "description": "Penalty for presence of tokens (-2 to 2)",
            "default": 0
          }
        }
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the completion"
          },
          "object": {
            "type": "string",
            "description": "Object type, always 'chat.completion'"
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp of when the completion was created"
          },
          "choices": {
            "type": "array",
            "description": "Array of completion choices",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "Index of the choice"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "description": "Role of the completion message",
                      "enum": ["assistant"]
                    },
                    "content": {
                      "type": "string",
                      "description": "Content of the completion message"
                    }
                  }
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Reason why the completion finished",
                  "enum": ["stop", "length", "content_filter"]
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt"
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in the completion"
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used"
              }
            }
          }
        }
      },
      "CompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for completion",
            "default": "chatgpt-4o-latest"
          },
          "prompt": {
            "type": "string",
            "description": "The text prompt to complete"
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate",
            "default": 1000
          },
          "temperature": {
            "type": "number",
            "description": "Controls randomness (0-2)",
            "default": 0.7
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus sampling parameter (0-1)",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response",
            "default": false
          },
          "stop": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Up to 4 sequences where the API will stop generating"
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Penalty for frequency of tokens (-2 to 2)",
            "default": 0
          },
          "presence_penalty": {
            "type": "number",
            "description": "Penalty for presence of tokens (-2 to 2)",
            "default": 0
          }
        }
      },
      "CompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the completion"
          },
          "object": {
            "type": "string",
            "description": "Object type, always 'text_completion'"
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp of when the completion was created"
          },
          "model": {
            "type": "string",
            "description": "Model used for completion"
          },
          "choices": {
            "type": "array",
            "description": "Array of completion choices",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The completed text"
                },
                "index": {
                  "type": "integer",
                  "description": "Index of the choice"
                },
                "logprobs": {
                  "type": "object",
                  "nullable": true,
                  "description": "Log probabilities of tokens (if requested)"
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Reason why the completion finished",
                  "enum": ["stop", "length", "content_filter"]
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt"
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in the completion"
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used"
              }
            }
          }
        }
      },
      "ImageGenerationRequest": {
        "type": "object",
        "required": [
          "prompt",
          "model"
        ],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The text description of the image to generate"
          },
          "model": {
            "type": "string",
            "description": "The model to use for generation"
          },
          "width": {
            "type": "integer",
            "description": "Width of the generated image",
            "default": 1024
          },
          "height": {
            "type": "integer",
            "description": "Height of the generated image",
            "default": 1024
          },
          "negative_prompt": {
            "type": "string",
            "description": "Things to avoid in the generated image"
          },
          "nImages": {
            "type": "integer",
            "description": "Number of images to generate",
            "default": 1
          },
          "num_steps": {
            "type": "integer",
            "description": "Number of denoising steps",
            "default": 30
          },
          "resolution": {
            "type": "string",
            "description": "Output resolution",
            "default": "1024x1024"
          },
          "sampler_name": {
            "type": "string",
            "description": "Sampling method",
            "default": "DPM++ 2M Karras"
          },
          "scale": {
            "type": "number",
            "description": "Guidance scale",
            "default": 7.5
          }
        }
      },
      "ImageGenerationResponse": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "Base64 encoded image data"
          },
          "cost": {
            "type": "number",
            "description": "Cost of the generation"
          },
          "inputTokens": {
            "type": "integer",
            "description": "Number of input tokens used"
          },
          "outputTokens": {
            "type": "integer",
            "description": "Number of output tokens used"
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}